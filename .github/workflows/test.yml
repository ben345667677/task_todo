name: Compose Test

on: [push]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      AWS_HOST: ec2-13-218-113-24.compute-1.amazonaws.com
      AWS_USER: ec2-user
      AWS_KEY: ${{ secrets.AWS_PEM }}
    steps:
      - uses: actions/checkout@v4

      - name: Start Docker Compose
        run: |
          docker compose down --remove-orphans || true
          docker compose up -d --build

      - name: Check test_client logs for result
        shell: bash
        run: |
          set -e
          for i in $(seq 1 120); do
            LAST=$(docker compose logs --no-color test_client | tail -n 1 | tr -d '\r' || true)
            if [ "$LAST" = "0" ]; then
              exit 0
            elif [ "$LAST" = "1" ]; then
              exit 1
            fi
            sleep 2
          done
          exit 1

      - name: Inline Deploy (runs only on success)
        if: success()
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          printf '%s' "$AWS_KEY" | tr -d '\r' > ~/.ssh/aws_key
          chmod 600 ~/.ssh/aws_key
          ssh-keyscan -H "$AWS_HOST" >> ~/.ssh/known_hosts 2>/dev/null || true

          # Ensure remote web directory exists before copying
          ssh -i ~/.ssh/aws_key "$AWS_USER@$AWS_HOST" "mkdir -p /home/ec2-user/web"

          ZIP_NAME="project_$(date +%Y%m%d_%H%M%S).zip"
          zip -qr "$ZIP_NAME" . \
            -x "venv/*" "__pycache__/*" "*.pyc" "*.pyo" \
               ".git/*" ".github/*" "node_modules/*"

          scp -i ~/.ssh/aws_key "$ZIP_NAME" "$AWS_USER@$AWS_HOST:/home/ec2-user/web/"

          ssh -i ~/.ssh/aws_key "$AWS_USER@$AWS_HOST" bash -s <<'EOSSH'
          set -euo pipefail
          WEB_DIR=/home/ec2-user/web
          ZIP_FILE=$(ls -t "$WEB_DIR"/project_*.zip | head -1)
          cd "$WEB_DIR"
          unzip -oq "$ZIP_FILE"
          rm -f "$ZIP_FILE"
          if command -v docker >/dev/null 2>&1; then
            if docker compose version >/dev/null 2>&1; then
              docker compose up -d --build
            elif command -v docker-compose >/dev/null 2>&1; then
              docker-compose up -d --build
            fi
          fi
          EOSSH

          rm -f "$ZIP_NAME" ~/.ssh/aws_key

      - name: Cleanup
        if: always()
        run: docker compose down --remove-orphans