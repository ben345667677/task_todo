name: Test and Deploy to AWS

on: [push, pull_request]

env:
  AWS_HOST: ec2-13-218-113-24.compute-1.amazonaws.com
  AWS_USER: ec2-user
  AWS_KEY: ${{ secrets.AWS_PEM }}

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Test
      timeout-minutes: 15
      run: |
        set -e
        
        echo "Starting Docker services..."
        docker compose up -d
        
        echo "Waiting for services to be ready..."
        sleep 30
        
        echo "Running tests..."
        if TEST_OUTPUT=$(docker compose run --rm test_client python server_test.py 2>&1); then
          echo "Test command executed successfully"
          echo "Test output: $TEST_OUTPUT"
          
          if echo "$TEST_OUTPUT" | grep -q "^0$"; then
            echo "✅ SUCCESS: Test passed - output contains 0"
          else
            echo "❌ FAILED: Test failed - output is '$TEST_OUTPUT' (expected 0)"
            docker compose down
            exit 1
          fi
        else
          echo "❌ FAILED: Test command failed to execute"
          docker compose down
          exit 1
        fi
        
        echo "Cleaning up Docker services..."
        docker compose down
    
    - name: Deploy to AWS EC2
      if: success()
      timeout-minutes: 15
      run: |
        set -e
        
        echo "🚀 Starting AWS deployment..."
        
        # יצירת קובץ זיפ
        ZIP_NAME="task_todo_$(date +%Y%m%d_%H%M%S).zip"
        echo "📦 Creating zip file: $ZIP_NAME"
        zip -r $ZIP_NAME . -x "venv/*" "__pycache__/*" "*.pyc" "*.pyo" ".git/*" ".gitignore"
        
        # שמירת מפתח SSH
        echo "🔑 Setting up SSH key..."
        mkdir -p ~/.ssh
        echo "${AWS_KEY}" | tr -d '\r' > ~/.ssh/aws_key
        chmod 600 ~/.ssh/aws_key
        
        # בדיקת חיבור בסיסי
        echo "🔍 Testing connectivity..."
        nc -vz $AWS_HOST 22 || {
            echo "❌ Port 22 not accessible"
            exit 1
        }
        
        # בדיקת ping (לא חוסם)
        echo "Testing ping (optional)..."
        ping -c 3 $AWS_HOST || echo "⚠️ Ping failed (expected if ICMP blocked by AWS)" || true
        
        # הוספת host ל-known hosts
        ssh-keyscan -H $AWS_HOST >> ~/.ssh/known_hosts
        
        # בדיקת SSH
        echo "🔍 Testing SSH connection..."
        if ssh -i ~/.ssh/aws_key -o ConnectTimeout=10 -o StrictHostKeyChecking=no $AWS_USER@$AWS_HOST "echo 'SSH OK' && uname -a"; then
            echo "✅ SSH connection successful!"
        else
            echo "❌ SSH failed with $AWS_USER, trying ubuntu..."
            if ssh -i ~/.ssh/aws_key -o ConnectTimeout=10 -o StrictHostKeyChecking=no ubuntu@$AWS_HOST "echo 'SSH OK with ubuntu' && uname -a"; then
                echo "✅ SSH works with ubuntu user"
                export AWS_USER=ubuntu
            else
                echo "❌ SSH failed with both users"
                echo "Check: Security Group, instance status, private key"
                exit 1
            fi
        fi
        
        # העברת קבצים
        echo "📤 Uploading files..."
        scp -i ~/.ssh/aws_key -o StrictHostKeyChecking=no $ZIP_NAME $AWS_USER@$AWS_HOST:~/
        
        # פריסה
        echo "🔧 Deploying to AWS..."
        ssh -i ~/.ssh/aws_key -o StrictHostKeyChecking=no $AWS_USER@$AWS_HOST << ENDSSH
            set -e
            
            echo "📁 Setting up web directory..."
            mkdir -p web
            cd web
            
            echo "🗑️ Cleaning up..."
            rm -rf * .* 2>/dev/null || true
            
            echo "📦 Extracting files..."
            unzip -q ~/$ZIP_NAME
            rm ~/$ZIP_NAME
            
            echo "🐳 Setting up Docker..."
            sudo usermod -aG docker $USER || true
            sudo systemctl start docker || true
            sudo systemctl enable docker || true
            
            echo "🐳 Running docker compose..."
            sudo docker compose down --remove-orphans 2>/dev/null || true
            sudo docker compose up -d --build --force-recreate
            
            echo "📊 Container status:"
            sudo docker compose ps
            
            echo "✅ Deployment completed!"
            echo "🌐 App available at: http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4):5000"
        ENDSSH
        
        # ניקוי
        echo "🧹 Cleaning up..."
        rm $ZIP_NAME
        rm ~/.ssh/aws_key
        
        echo "🎉 Deployment successful!"